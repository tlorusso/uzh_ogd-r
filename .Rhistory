library("xaringanstat", lib.loc="C:/Program Files/R/R-3.5.0/library")
library(kofdata)
?get_dataset
data <- fromJSON(http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php)
data <- fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
data <- httr::content("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
data %>% map_dfr()
library(tidyverse)
library(purrr)
data %>%
map_dfr()
data %>%
map_dfr(bind_rows)
data2 <-data %>%
map_dfr(bind_rows)
View(data2)
data2 <- c(1:3) %>%
map_dfr(data[[.x]], bind_rows)
data2 <- c(1,3) %>%
map_dfr(bind_rows(data[[.x]]))
data2 <- c(1,3) %>%
map_dfr(bind_rows(data[[.]]))
View(data)
data2 <- data[] %>%
map_dfr(bind_rows())
data2 <- data[] %>%
map_dfr(bind_rows)
View(data2)
View(data)
View(data2)
data2$VORLAGEN
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows)
View(data3)
data %>%
map_dfr(bind_rows(.["VORLAGEN"]))
data %>%
map_dfr(bind_rows(.$VORLAGEN))
View(data3)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows(.),.id="Gemeinde")
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows(),.id="Gemeinde")
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows)
d_id <- rep(seq_along(data), lengths(data))
```{r}
s_id <- sequence(lengths(data))
t_id <- lengths(unlist(data, rec=FALSE))
data.frame(
d_id  = rep(d_id, t_id),
s_id  = rep(s_id, t_id),
t_id  = sequence(t_id),
token = unlist(data)
)
hello <-data.frame(
d_id  = rep(d_id, t_id),
s_id  = rep(s_id, t_id),
t_id  = sequence(t_id),
token = unlist(data)
)
d_id <- rep(seq_along(data), lengths(data))
s_id <- sequence(lengths(data))
t_id <- lengths(unlist(data, rec=FALSE))
hello <-data.frame(
d_id  = rep(d_id, t_id),
s_id  = rep(s_id, t_id),
t_id  = sequence(t_id),
token = unlist(data)
)
hello <-data.frame(
d_id  = rep(VORLAGE_NAME, t_id),
s_id  = rep(s_id, t_id),
t_id  = sequence(t_id),
token = unlist(data)
)
data %>%
modify_depth(-1,~tibble(token=.x) %>% rowid_to_column("t_id")) %>%
map(~map_dfr(.x,identity,.id = "s_id")) %>%
map_dfr(identity,.id = "d_id")
data %>%
modify_depth(0,~tibble(token=.x) %>% rowid_to_column("t_id")) %>%
map(~map_dfr(.x,identity,.id = "s_id")) %>%
map_dfr(identity,.id = "d_id")
data %>%
map(~map_dfr(.x,identity,.id = "s_id")) %>%
map_dfr(identity,.id = "d_id")
data4<-data %>%
map(~map_dfr(.x,identity,.id = "s_id")) %>%
map_dfr(identity,.id = "d_id")
data4<-data %>%
map_dfr(.x,identity,.id = "s_id") %>%
map_dfr(.x["VORLAGEN"],.id = "d_id")
data4<-data %>%
map_dfr(.x["VORLAGEN"],.id = "d_id")
data4<-data %>%
map_dfr(.["VORLAGEN"],.id = "d_id")
data["VORLAGEN"]
data[1]["VORLAGEN"]
data[[1]]["VORLAGEN"]
data[[1]]["VORLAGEN"]
glimpse(data[[1]]["VORLAGEN"])
data4<- 1:2 %>%
map_dfr(data[[.]]["VORLAGEN"],.id = "d_id")
data4<- 1:2 %>%
map_dfr(data[[1]]["VORLAGEN"],.id = "d_id")
data[[1]]["VORLAGEN"]
data4<- c(1:2) %>%
map_dfr(data[[1]]["VORLAGEN"],.id = "d_id")
data4 <- data %>% map_dfr(bind_rows(map_dfr(.`$VORLAGEN` %>%
data4 <- data %>% map_dfr(bind_rows(map_dfr(.$VORLAGEN %>%
map_dfr(bind_rows))))
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows)
data %>%
set_names(seq_along(data)) %>%
map( ~ set_names(.x, seq_along(.x)) %>%
stack) %>%
bind_rows(.id = 'd_id') %>%
group_by(d_id, s_id = ind) %>%
mutate(t_id = row_number())
data %>%
set_names(seq_along(data)) %>%
map( ~ set_names(.x, seq_along(.x)) %>%
stack) %>%
bind_rows(.id = 'd_id')
library(data.table)
rbindlist(data, fill=TRUE)
hello <-rbindlist(data, fill=TRUE)
hello <-rbindlist(data$VORLAGEN, fill=TRUE)
hello <-rbindlist(data$VORLAGE, fill=TRUE)
hello <-flatten(data)
hello <-unlist(data)
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
data3 <- data$VORLAGEN %>%
map_dfr(bind_rows, set_names)
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
data2 <- data[] %>%
map_dfr(bind_rows)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows, set_names)
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
data2 <- data[] %>%
map_dfr(bind_rows)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows, set_names)
data2 <- data %>%
map_dfr(bind_rows)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows, set_names)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows)
data3 <- data$VORLAGEN %>%
map_dfr(bind_rows)
data %>% unnest()
data2 <- data %>%
map_dfr() %>%
map_dfr("VORLAGEN")
data2 <- data %>%
map_dfr(bind_rows) %>%
map_dfr("VORLAGEN")
data2 <- data %>%
map_dfr(bind_rows)
data2 %>% map("VORLAGEN")
hello <-data2 %>% map("VORLAGEN")
data2 <- data %>%
map_dfr(bind_rows) %>%
map_dfr(1, bind_rows)
data22 <- data %>%
map_dfr(bind_rows) %>%
map_dfr(1)
data22 <- data %>%
map_dfr(bind_rows) %>%
map_dfr("VORLAGEN")
data22 <- data %>%
map_dfr(bind_rows) %>%
map_dfr(.,"VORLAGEN")
data22 <- data %>%
map_dfr(bind_rows)
data22$NAME
View(data2)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows)
View(data3)
data3 <- data2$VORLAGEN %>%
map_dfr(bind_rows) %>%
rbind(data2)
data2 <- data %>%
map_dfr(bind_rows)
dodod <-do.call(data,rbind)
dodod <-do.call(rbind,data)
data22 <- data %>%
map_dfr(bind_rows) %>%
map_dfr(extract, "VORLAGEN"))
x <- map_dfr(data, extract, c("VORLAGEN"))
x <- map_dfr(data, `[`, c("VORLAGEN"))
View(x)
x <- map_dfr(data, `[`, c("VORLAGEN","GEBIETE"))
x <- map_dfr(data, `[`, c("VORLAGEN","NAME"))
View(data2)
x <- map_dfr(data2, `[`, c("VORLAGEN","BFS"))
data %>%
mutate(json_list = map(data, flatten_dfc)) %>%
unnest()
data %>%
mutate(json_list = map_dfr(data, flatten_dfc)) %>%
unnest()
View(data2)
View(data3)
Reduce(rbind,data)
hhh <-Reduce(rbind,data)
View(hhh)
hhh %>% map_dfr("VORLAGEN")
hh2<-hhh %>% map_dfr("VORLAGEN")
hhh2 <- hhh %>% map_dfr("VORLAGEN")
hhh %>% map_dfr("VORLAGEN")
unlist(lapply(data,                                 ## for each element in the big list
function(x)
sapply(1:length(x),                   ## for each element in the sublist
function(y)do.call("[[",list(x,y)))))
hello <-unlist(lapply(data[[1]],                                 ## for each element in the big list
function(x)
sapply(1:length(x),                   ## for each element in the sublist
function(y)do.call("[[",list(x,y)))))
hello <-unlist(lapply(data,                                 ## for each element in the big list
function(x)
sapply(1:length(x),                   ## for each element in the sublist
function(y)do.call("[[",list(x,y)))))
data.frame(t(sapply(data,c)))
hello <-data.frame(t(sapply(data,c)))
res1 <- data %>%
#bind the inner datasets and create an id column
map(bind_rows, .id = "id") %>%
#bind the outer datasets and create an EXP column
bind_rows(.id = "VORLAGE")
res1 <- data %>%
#bind the inner datasets and create an id column
map(bind_rows, .id = "id") %>%
#bind the outer datasets and create an EXP column
bind_rows(.id = "VORLAGE") %>%
#reshape to wide format
spread(id, VORLAGEN)
DT::datatable(data)
urls <- jsonlite::fromJSON("https://opendata.swiss/api/3/action/package_show?id=echtzeitdaten-am-abstimmungstag")
urls$result$url
urls$result$resources$download_url
urlchoice <-urls$result$resources$download_url
urlchoice[7]
shiny::runApp('abstview_zh')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
urls <- jsonlite::fromJSON("https://opendata.swiss/api/3/action/package_show?id=echtzeitdaten-am-abstimmungstag")
urlchoice <-urls$result$resources$download_url
shiny::runApp()
urlchoice[7]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
urlchoice <- data.frame()
urlchoice$url <- urls$result$resources$download_url
urls <- jsonlite::fromJSON("https://opendata.swiss/api/3/action/package_show?id=echtzeitdaten-am-abstimmungstag")
urlchoice$url <- urls$result$resources$download_url
urls <- jsonlite::fromJSON("https://opendata.swiss/api/3/action/package_show?id=echtzeitdaten-am-abstimmungstag")
urlchoice$url <- urls$result$resources$download_url
urlchoice <- urls$result$resources$download_url
urlchoice$label <- substr(urls$result$resources$download_url,6,12)
url <- urls$result$resources$download_url
label <- substr(urls$result$resources$download_url,6,12)
label <- substr(urls$result$resources$download_url,37,47)
label <- substr(urls$result$resources$download_url,38,47)
runApp()
urls$result$resources$download_url[1]
runApp()
runApp()
runApp()
urls$result$resources$download_url[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (!require(pacman)) install.packages(pacman)
pacman::p_load(sf,tidyverse,ggrepel,statR)
library(tidyverse)
# library(purrr)
# get json via webservice
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
# transform nested list into dataframe
data <- data %>%
map_dfr(bind_rows) %>%
unnest(VORLAGEN)
if (!require(pacman)) install.packages(pacman)
pacman::p_load(sf,tidyverse,ggrepel,statR)
library(tidyverse)
# library(purrr)
# get json via webservice
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
# transform nested list into dataframe
data <- data %>%
map_dfr(bind_rows) %>%
unnest(VORLAGEN)
# install.packages("ggridges")
data$VORLAGE_NAME <- factor(data$VORLAGE_NAME, labels = c("GrÃ¼ne Wirtschaft", "AHV Plus", "NDG", "Bezahlbare Kinderbetreuung"))
data <-data %>% mutate_at(vars(JA_STIMMEN_ABSOLUT,NEIN_STIMMEN_ABSOLUT,JA_PROZENT,STIMMBETEILIGUNG),as.numeric)
#aggregiere auf Gemeindeebene
data <-data %>%
group_by(BFS,VORLAGE_NAME) %>%
summarize(ja_anteil=round(sum(JA_STIMMEN_ABSOLUT,na.rm=T)/sum(JA_STIMMEN_ABSOLUT+NEIN_STIMMEN_ABSOLUT,na.rm=T)*100,1))
library(ggridges)
ggplot(data,aes(ja_anteil,VORLAGE_NAME))+
geom_density_ridges(scale = 0.8, fill="steelblue") +
theme_ridges() +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(limits = c(0, 100),breaks=seq(0,100,25))+
labs(x="Ja-Anteil (%)", y="Vorlage")
# get shapefile from here
# http://www.web.statistik.zh.ch/cms_basiskarten/gen_Gemeinde_2018/GEN_A4_GEMEINDEN_SEEN_2018_F.zip
#Gemeindeshapes
gemeinden<- sf::read_sf("GEN_A4_GEMEINDEN_SEEN_2018_F", stringsAsFactors = FALSE)
#join municipality-infos to points
mapdata <- left_join(data,gemeinden, by=c("BFS"))
map <- ggplot(mapdata)+
geom_sf(aes(fill=ja_anteil))+
facet_wrap(~VORLAGE_NAME)
map
mapdata <- inner_join(gemeinden,data, by=c("BFS"))
mapnew <- ggplot(mapdata)+
geom_sf(aes(fill=ja_anteil),color="white")+
facet_wrap(~VORLAGE_NAME)+
coord_sf(datum = NA)+
labs(fill="Ja (in %)")+
theme_void()+
scale_fill_gradient2(midpoint=50)+
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 10))
ggplotly(mapnew)
plotly::ggplotly(mapnew)
plotly::ggplotly(mapnew)
runApp()
runApp()
ggplotly(p) %>%
layout(height = input$plotHeight, autosize=TRUE)
ggplotly(map) %>%
layout(height = input$plotHeight, autosize=TRUE)
plotly::ggplotly(map) %>%
layout(height = input$plotHeight, autosize=TRUE)
plotly::ggplotly(map)
plotly::ggplotly(map) %>%
layout(height = input$plotHeight, autosize=TRUE)
plotly::ggplotly(map)
gemeinden<- sf::read_sf("GEN_A4_GEMEINDEN_SEEN_2018_F", stringsAsFactors = FALSE)
#join municipality-infos to points
mapdata <- left_join(data,gemeinden, by=c("BFS"))
if (!require(pacman)) install.packages(pacman)
pacman::p_load(sf,tidyverse,ggrepel,statR)
library(tidyverse)
# library(purrr)
# get json via webservice
data <- jsonlite::fromJSON("http://www.wahlen.zh.ch/abstimmungen/2016_09_25/viewer_download.php")
# transform nested list into dataframe
data <- data %>%
map_dfr(bind_rows) %>%
unnest(VORLAGEN)
# install.packages("ggridges")
data$VORLAGE_NAME <- factor(data$VORLAGE_NAME, labels = c("GrÃ¼ne Wirtschaft", "AHV Plus", "NDG", "Bezahlbare Kinderbetreuung"))
data <-data %>% mutate_at(vars(JA_STIMMEN_ABSOLUT,NEIN_STIMMEN_ABSOLUT,JA_PROZENT,STIMMBETEILIGUNG),as.numeric)
#aggregiere auf Gemeindeebene
data <-data %>%
group_by(BFS,VORLAGE_NAME) %>%
summarize(ja_anteil=round(sum(JA_STIMMEN_ABSOLUT,na.rm=T)/sum(JA_STIMMEN_ABSOLUT+NEIN_STIMMEN_ABSOLUT,na.rm=T)*100,1))
library(ggridges)
ggplot(data,aes(ja_anteil,VORLAGE_NAME))+
geom_density_ridges(scale = 0.8, fill="steelblue") +
theme_ridges() +
scale_y_discrete(expand = c(0.01, 0)) +
scale_x_continuous(limits = c(0, 100),breaks=seq(0,100,25))+
labs(x="Ja-Anteil (%)", y="Vorlage")
# get shapefile from here
# http://www.web.statistik.zh.ch/cms_basiskarten/gen_Gemeinde_2018/GEN_A4_GEMEINDEN_SEEN_2018_F.zip
#Gemeindeshapes
gemeinden<- sf::read_sf("GEN_A4_GEMEINDEN_SEEN_2018_F", stringsAsFactors = FALSE)
#join municipality-infos to points
mapdata <- left_join(data,gemeinden, by=c("BFS"))
map <- ggplot(mapdata)+
geom_sf(aes(fill=ja_anteil))+
facet_wrap(~VORLAGE_NAME)
plotly::ggplotly(map) %>%
layout(height = input$plotHeight, autosize=TRUE)
map
#Labels - Kurzbezeichnung
mapdata <- inner_join(gemeinden,data, by=c("BFS"))
mapnew <- ggplot(mapdata)+
geom_sf(aes(fill=ja_anteil),color="white")+
facet_wrap(~VORLAGE_NAME)+
coord_sf(datum = NA)+
labs(fill="Ja (in %)")+
theme_void()+
scale_fill_gradient2(midpoint=50)+
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 10))
lotly::ggplotly(map)
plotly::ggplotly(map)
#join municipality-infos to points
mapdata <- left_join(data,gemeinden, by=c("BFS"))
map <- ggplot(mapdata)+
geom_sf(aes(fill=ja_anteil))+
facet_wrap(~VORLAGE_NAME)
plotly::ggplotly(map)
map <- ggplot(mapdata %>% filter(VORLAGE_NAME="GrÃ¼ne Wirtschaft"))+
geom_sf(aes(fill=ja_anteil))
plotly::ggplotly(map)
map <- ggplot(mapdata %>% filter(VORLAGE_NAME="GrÃ¼ne Wirtschaft"))+
geom_sf(aes(fill=ja_anteil))
map <- ggplot(mapdata %>% filter(VORLAGE_NAME=="GrÃ¼ne Wirtschaft"))+
geom_sf(aes(fill=ja_anteil))
plotly::ggplotly(map)
plotly::ggplotly(map)
plotly::ggplotly(map)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("Cairo")
runApp()
runApp()
runApp()
runApp()
